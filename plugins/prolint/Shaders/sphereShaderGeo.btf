<?xml version="1.0" encoding="utf-8"?>
<btf type="MegaMolGLSLShader" version="1.0" namespace="sphereShaderGeo">
    
	 
  <include file="common"/>
  <include file="core_utils"/>

  <snippet name="commondefines" type="string">
    <!-- 
#define OGL_DEPTH_SES
#define CLIP
#define DEPTH
#define SMALL_SPRITE_LIGHTING

//#define DEBUG

#ifndef FLACH
#define FLACH
#endif
-->
  </snippet>

  
//******************************************************************
//************************** LIGHTING ******************************
//******************************************************************
<namespace name="lighting">
        <snippet name="simple" type="string">
            <!--
// TODO: Implementation is wrong! Does positional Lighting instead of directional lighting!

// ray:      the eye to fragment ray vector
// normal:   the normal of this fragment
// lightPos: the position of the light source
// color:    the base material color
vec3 LocalLighting(const in vec3 ray, const in vec3 normal, const in vec3 lightPos, const in vec3 color) {
    // TODO: rewrite!
    vec3 lightDir = normalize(lightPos);

    vec4 lightparams = vec4(0.55, 0.7, 0.1, 1.0);
#define LIGHT_AMBIENT lightparams.x
#define LIGHT_DIFFUSE lightparams.y
#define LIGHT_SPECULAR lightparams.z
#define LIGHT_EXPONENT lightparams.w
    float nDOTl = dot(normal, lightDir);

    vec3 r = normalize(2.0 * vec3(nDOTl) * normal - lightDir);
    //return vec3(1.0,1.0,1.0);
    return LIGHT_AMBIENT * color 
        + LIGHT_DIFFUSE * color * max(nDOTl, 0.0) 
        + LIGHT_SPECULAR * vec3(pow(max(dot(r, -ray), 0.0), LIGHT_EXPONENT));
}
-->
        </snippet>
    </namespace>


 <shader name="sphereVertexGeom">
      <snippet type="version">140</snippet>
       <snippet name="commondefines"/>
      <snippet name="core_utils::tflookup"/>
      <snippet name="core_utils::tfconvenience"/>
      <snippet type="string">
        <!--
        #extension GL_ARB_shader_storage_buffer_object : require
#extension GL_EXT_gpu_shader4 : require
uniform mat4 modelview;
uniform mat4 proj;

uniform vec4 hoverColor;
uniform int hoverSphereID;
uniform bool hideOnHover;
uniform vec4 selectionColor;
uniform int selectedSphereID;
uniform bool hideOnSelection;
uniform vec4 baseColor;


in vec4 vertex;


layout(shared, binding = 1) buffer sphereValue_SSBO {
		float sphereValue[];
	};

out vec4 inColor;

void main(void) {
    gl_Position = vertex;

     if(gl_VertexID == selectedSphereID){
        inColor = selectionColor;
    }else if(gl_VertexID == hoverSphereID){
        inColor = hoverColor;
    }else if((sphereValue[gl_VertexID] < tfRange.x)){
        inColor = baseColor;
    }else{
        inColor = tflookup((sphereValue[gl_VertexID]));
        //inColor = inColor;
    }
    
    
    // hide spheres
    if(selectedSphereID != -1 && selectedSphereID != gl_VertexID && hideOnSelection){
        inColor = vec4(vec3(inColor),0.0);
        gl_Position = vec4(0,0,0,0);
    }
     else if(hoverSphereID != -1 && hoverSphereID != gl_VertexID && hideOnHover){
        inColor = vec4(vec3(inColor),0.0);
        gl_Position = vec4(0,0,0,0);
    }
    //inColor = color;
}
-->
      </snippet>
    </shader>
	
	
	

 <shader name="sphereGeom">
      <snippet type="version">140</snippet>
      <snippet type="string">
        <!--
#extension GL_ARB_gpu_shader5 : enable
#extension GL_EXT_geometry_shader4 : enable

//layout (points) in;
//layout (triangle_strip, max_vertices = 4) out;

uniform mat4 modelview;
uniform mat4 proj;
uniform vec4 viewAttr; // TODO: check fragment position if viewport starts not in (0, 0)
uniform vec4 lightPos;

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

in vec4 inColor[1];

out vec4 color;
out vec4 objPos;
out vec4 camPos;
out vec4 light;
out float rad;
out float squareRad;

mat4 modelviewproj = proj*modelview; // TODO Move this to the CPU?
mat4 modelviewInv = inverse(modelview);

void main(void) {
    
    // remove the sphere radius from the w coordinates to the rad varyings
    //vec4 inPos = gl_in[0].gl_Position;
    vec4 inPos = gl_PositionIn[0];
    rad = inPos.w;
    squareRad = rad*rad;
    inPos.w = 1.0;

    // object pivot point in object space    
    objPos = inPos; // no w-div needed, because w is 1.0 (Because I know)

    // calculate cam position
    camPos = modelviewInv[3]; // (C) by Christoph
    camPos.xyz -= objPos.xyz; // cam pos to glyph space

    // calculate light position in glyph space
    // USE THIS LINE TO GET POSITIONAL LIGHTING
    //lightPos = modelviewInv * gl_LightSource[0].position - objPos;
    // USE THIS LINE TO GET DIRECTIONAL LIGHTING
    light = lightPos;
    
    // calculate light position in glyph space  
    color = inColor[0];    
    
       // Sphere-Touch-Plane-Approach
    vec2 winHalf = 2.0 / viewAttr.zw; // window size

    vec2 d, p, q, h, dd;

    // get camera orthonormal coordinate system
    vec4 tmp;

/*#ifdef CALC_CAM_SYS
    // camera coordinate system in object space
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[2];
    vec3 camIn = normalize(tmp.xyz);
    tmp = gl_ModelViewMatrixInverse[3] + gl_ModelViewMatrixInverse[1];
    vec3 camUp = tmp.xyz;
    vec3 camRight = normalize(cross(camIn, camUp));
    camUp = cross(camIn, camRight);
#endif // CALC_CAM_SYS*/

    vec2 mins, maxs;
    vec3 testPos;
    vec4 projPos;

    
#ifdef HALO
    squarRad = (rad + HALO_RAD) * (rad + HALO_RAD);
#endif // HALO
    
    // projected camera vector
    vec3 c2 = vec3(dot(camPos.xyz, camRight), dot(camPos.xyz, camUp), dot(camPos.xyz, camIn));

    vec3 cpj1 = camIn * c2.z + camRight * c2.x;
    vec3 cpm1 = camIn * c2.x - camRight * c2.z;

    vec3 cpj2 = camIn * c2.z + camUp * c2.y;
    vec3 cpm2 = camIn * c2.y - camUp * c2.z;
    
    d.x = length(cpj1);
    d.y = length(cpj2);

    dd = vec2(1.0) / d;

    p = squareRad * dd;
    q = d - p;
    h = sqrt(p * q);
    //h = vec2(0.0);
    
    p *= dd;
    h *= dd;

    cpj1 *= p.x;
    cpm1 *= h.x;
    cpj2 *= p.y;
    cpm2 *= h.y;

    testPos = objPos.xyz + cpj1 + cpm1;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = projPos.xy;
    maxs = projPos.xy;

    testPos -= 2.0 * cpm1;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos = objPos.xyz + cpj2 + cpm2;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    testPos -= 2.0 * cpm2;
    projPos = modelviewproj * vec4(testPos, 1.0);
    projPos /= projPos.w;
    mins = min(mins, projPos.xy);
    maxs = max(maxs, projPos.xy);

    gl_Position = vec4(mins.x, maxs.y, 0.0, inPos.w); EmitVertex();
    gl_Position = vec4(mins.x, mins.y, 0.0, inPos.w); EmitVertex();
    gl_Position = vec4(maxs.x, maxs.y, 0.0, inPos.w); EmitVertex();
    gl_Position = vec4(maxs.x, mins.y, 0.0, inPos.w); EmitVertex();
    EndPrimitive();
}
-->
      </snippet>
    </shader>



    <shader name="sphereFragmentGeom_withLight">
      <snippet type="version">140</snippet>
      <snippet name="commondefines"/>
      <snippet name="lighting::simple"/>
      <snippet type="string">
        <!--
#extension GL_ARB_gpu_shader5 : enable
#extension GL_EXT_geometry_shader4 : enable

uniform vec4 viewAttr; // TODO: check fragment position if viewport starts not in (0, 0)
uniform mat4 modelview;
uniform mat4 proj;

in vec4 color;
in vec4 objPos;
in vec4 camPos;
in vec4 light;
in float rad;
in float squareRad;

#ifndef CALC_CAM_SYS
uniform vec3 camIn;
uniform vec3 camUp;
uniform vec3 camRight;
#endif // CALC_CAM_SYS

mat4 modelviewproj = proj*modelview; // TODO Move this to the CPU?
mat4 modelviewprojInv = inverse(modelviewproj);
mat4 modelviewprojTrans = transpose(modelviewproj);
#define DEPTH
void main(void) {
    vec4 coord;
    vec3 ray;
    float lambda;
    vec3 colOut;
    vec3 sphereintersection = vec3( 0.0);
    vec3 normal;

    // transform fragment coordinates from window coordinates to view coordinates.
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    
    // transform fragment coordinates from view coordinates to object coordinates.
    coord = modelviewprojInv * coord;
    coord /= coord.w;
    coord -= objPos; // ... and to glyph space
    
    // calc the viewing ray
    ray = normalize(coord.xyz - camPos.xyz);

    // calculate the geometry-ray-intersection
    float d1 = -dot(camPos.xyz, ray);                       // projected length of the cam-sphere-vector onto the ray
    float d2s = dot(camPos.xyz, camPos.xyz) - d1 * d1;      // off axis of cam-sphere-vector and ray
    float radicand = squareRad - d2s;                        // square of difference of projected length and lambda
#ifdef CLIP
    lambda = d1 - sqrt(radicand);                           // lambda

    float radicand2 = 0.0;
    if( radicand < 0.0 ) {
        discard;
    }
    else {
        // chose color for lighting
        colOut = color.rgb;
		if( lambda < 0.0 ) discard;
        sphereintersection = lambda * ray + camPos.xyz;    // intersection point
        // "calc" normal at intersection point
        normal = sphereintersection / rad;
    }
    
#endif // CLIP

    // phong lighting with directional light
    //gl_FragColor = vec4(LocalLighting(ray, normal, lightPos.xyz, color), 1.0);
    gl_FragColor = vec4(LocalLighting(ray, normal, light.xyz, colOut), color.w);
    
    // calculate depth
#ifdef DEPTH
    vec4 Ding = vec4(sphereintersection + objPos.xyz, 1.0);
    float depth = dot(modelviewprojTrans[2], Ding);
    float depthW = dot(modelviewprojTrans[3], Ding);
    gl_FragDepth = ((depth / depthW) + 1.0) * 0.5;
    
#ifndef CLIP
    gl_FragDepth = (radicand < 0.0) ? 1.0 : ((depth / depthW) + 1.0) * 0.5;
    gl_FragColor.rgb = (radicand < 0.0) ? color.rgb : gl_FragColor.rgb;
#endif // CLIP

#endif // DEPTH

    
#ifdef RETICLE
    coord = gl_FragCoord 
        * vec4(viewAttr.z, viewAttr.w, 2.0, 0.0) 
        + vec4(-1.0, -1.0, -1.0, 1.0);
    if (min(abs(coord.x - centerFragment.x), abs(coord.y - centerFragment.y)) < 0.002) {
        //gl_FragColor.rgb = vec3(1.0, 1.0, 0.5);
        gl_FragColor.rgb += vec3(0.3, 0.3, 0.5);
    }
#endif // RETICLE

//gl_FragColor.rgb = normal; // DEBUG
//gl_FragColor = color; // DEBUG
}
-->
      </snippet>
    </shader>


</btf>